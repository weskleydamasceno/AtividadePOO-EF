// <auto-generated />
using Atividade2EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Atividade2EFCore.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20180208171114_secondmigration")]
    partial class secondmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Atividade2EFCore.Agencia", b =>
                {
                    b.Property<int>("AgenciaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BancoId");

                    b.Property<int>("ContaId");

                    b.HasKey("AgenciaID");

                    b.HasIndex("BancoId");

                    b.ToTable("Agencias");
                });

            modelBuilder.Entity("Atividade2EFCore.Banco", b =>
                {
                    b.Property<int>("BancoId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("BancoId");

                    b.ToTable("Bancos");
                });

            modelBuilder.Entity("Atividade2EFCore.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContaId");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Atividade2EFCore.ClienteSolicitacao", b =>
                {
                    b.Property<int>("ClienteSolicitacaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClientId");

                    b.Property<int?>("ClienteId");

                    b.Property<int>("SolicitacaoId");

                    b.HasKey("ClienteSolicitacaoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("SolicitacaoId");

                    b.ToTable("ClienteSolicitacoes");
                });

            modelBuilder.Entity("Atividade2EFCore.Conta", b =>
                {
                    b.Property<int>("ContaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgenciaId");

                    b.Property<int>("ClienteId");

                    b.Property<decimal>("Saldo");

                    b.Property<string>("Titular");

                    b.HasKey("ContaId");

                    b.HasIndex("AgenciaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Contas");
                });

            modelBuilder.Entity("Atividade2EFCore.ContaCorrente", b =>
                {
                    b.Property<int>("ContaCorrenteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContaId");

                    b.Property<decimal>("Taxa");

                    b.HasKey("ContaCorrenteId");

                    b.HasIndex("ContaId");

                    b.ToTable("ContasCorrente");
                });

            modelBuilder.Entity("Atividade2EFCore.ContaPoupanca", b =>
                {
                    b.Property<int>("ContaPoupancaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContaId");

                    b.Property<DateTime>("DataAniversario");

                    b.Property<decimal>("Juros");

                    b.HasKey("ContaPoupancaId");

                    b.HasIndex("ContaId");

                    b.ToTable("ContasPoupanca");
                });

            modelBuilder.Entity("Atividade2EFCore.Solicitacao", b =>
                {
                    b.Property<int>("SolicitacaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AgenciaID");

                    b.HasKey("SolicitacaoId");

                    b.HasIndex("AgenciaID");

                    b.ToTable("Solicitacoes");
                });

            modelBuilder.Entity("Atividade2EFCore.Agencia", b =>
                {
                    b.HasOne("Atividade2EFCore.Banco", "Banco")
                        .WithMany("Agencias")
                        .HasForeignKey("BancoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atividade2EFCore.ClienteSolicitacao", b =>
                {
                    b.HasOne("Atividade2EFCore.Cliente", "Cliente")
                        .WithMany("ClienteSolicitacoes")
                        .HasForeignKey("ClienteId");

                    b.HasOne("Atividade2EFCore.Solicitacao", "Solicitacao")
                        .WithMany("ClienteSolicitacoes")
                        .HasForeignKey("SolicitacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atividade2EFCore.Conta", b =>
                {
                    b.HasOne("Atividade2EFCore.Agencia", "Agencia")
                        .WithMany("Contas")
                        .HasForeignKey("AgenciaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atividade2EFCore.Cliente", "Cliente")
                        .WithMany("Contas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atividade2EFCore.ContaCorrente", b =>
                {
                    b.HasOne("Atividade2EFCore.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atividade2EFCore.ContaPoupanca", b =>
                {
                    b.HasOne("Atividade2EFCore.Conta", "Conta")
                        .WithMany()
                        .HasForeignKey("ContaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atividade2EFCore.Solicitacao", b =>
                {
                    b.HasOne("Atividade2EFCore.Agencia")
                        .WithMany("Solicitacoes")
                        .HasForeignKey("AgenciaID");
                });
#pragma warning restore 612, 618
        }
    }
}
